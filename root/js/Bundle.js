(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/ryan/Documents/war.re/gulp/../inc/appRouter.js":[function(require,module,exports){
"use strict";
'use strict';
var Container = require('./Container');
var FourOFour = require('./FourOFour');
var Home = require('./Home');
var Content = require('./Content');
var DefaultRoute = ReactRouter.DefaultRoute;
var HistoryLocation = ReactRouter.HistoryLocation;
var NotFoundRoute = ReactRouter.NotFoundRoute;
var Route = ReactRouter.Route;
var routes = (React.createElement(Route, {
  handler: Container,
  path: "/"
}, React.createElement(DefaultRoute, {
  name: "home",
  handler: Home
}), React.createElement(Route, {
  path: "n/",
  name: "content",
  handler: Content
}), React.createElement(NotFoundRoute, {handler: FourOFour})));
ReactRouter.run(routes, HistoryLocation, function(Handler) {
  React.render(React.createElement(Handler, null), document.body);
});


//# sourceURL=/Users/ryan/Documents/war.re/inc/appRouter.js
},{"./Container":"/Users/ryan/Documents/war.re/inc/Container.js","./Content":"/Users/ryan/Documents/war.re/inc/Content.js","./FourOFour":"/Users/ryan/Documents/war.re/inc/FourOFour.js","./Home":"/Users/ryan/Documents/war.re/inc/Home.js"}],"/Users/ryan/Documents/war.re/inc/Container.js":[function(require,module,exports){
"use strict";
'use strict';
var Router = ReactRouter;
var $__0 = Router,
    Route = $__0.Route,
    RouteHandler = $__0.RouteHandler,
    Link = $__0.Link;
var Navigation = ReactRouter.Navigation;
var Container = React.createClass({
  displayName: "Container",
  mixins: [Navigation],
  render: function() {
    return (React.createElement("div", {className: "container"}, React.createElement(RouteHandler, null)));
  }
});
module.exports = Container;


//# sourceURL=/Users/ryan/Documents/war.re/inc/Container.js
},{}],"/Users/ryan/Documents/war.re/inc/Content.js":[function(require,module,exports){
"use strict";
'use strict';
var Content = React.createClass({
  displayName: "Content",
  render: function() {
    return (React.createElement("div", null, "Content"));
  }
});
module.exports = Content;


//# sourceURL=/Users/ryan/Documents/war.re/inc/Content.js
},{}],"/Users/ryan/Documents/war.re/inc/FourOFour.js":[function(require,module,exports){
"use strict";
'use strict';
var Admin = React.createClass({
  displayName: "Admin",
  render: function() {
    return (React.createElement("div", null, "404 nott found :("));
  }
});
module.exports = Admin;


//# sourceURL=/Users/ryan/Documents/war.re/inc/FourOFour.js
},{}],"/Users/ryan/Documents/war.re/inc/Home.js":[function(require,module,exports){
"use strict";
'use strict';
var Navigation = ReactRouter.Navigation;
var Home = React.createClass({
  displayName: "Home",
  mixins: [Navigation],
  componentDidMount: function() {
    this.transitionTo('content');
  },
  render: function() {
    return (React.createElement("div", null, "Home"));
  }
});
module.exports = Home;


//# sourceURL=/Users/ryan/Documents/war.re/inc/Home.js
},{}]},{},["/Users/ryan/Documents/war.re/gulp/../inc/appRouter.js"])
//# sourceMappingURL=data:application/json;base64,
